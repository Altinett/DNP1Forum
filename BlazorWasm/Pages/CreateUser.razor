@page "/register"
@using BlazorWasm.Services
@inject IUserService UserService

<form @onsubmit="Create">
    <div class="register-user">
        <div class="register-user-title">Register</div>
        
        <div class="register-user-form">
            <!-- NAME -->
            <input placeholder="Name" type="text" @bind="Name"/>
            
            <!-- USERNAME -->
            <input placeholder="Username" type="text" @bind="Username"/>
            
            <!-- PASSWORD -->
            <input placeholder="Password" type="password" @bind="Password"/>
            
            <!-- REPEAT PASSWORD -->
            <input placeholder="Confirm Password" type="password"@bind="Password2"/>
            
            <!-- EMAIL -->
            <input placeholder="Email" type="email" @bind="Email"/>
            
            <!-- AGE -->
            <input placeholder="Age" type="text" @bind="Age"/>
            
            <!-- RED LABEL -->
            <div style="color: @MessageColor; margin-top: 5px;" hidden="@Hide">@MessageLabel</div>
            
            <input type="submit" class="button" value="Submit"/>
        </div>
    </div>
</form>


@code {
    private string Name, Username, Password, Password2, Email, Age;
    private string MessageColor = "red";
    private bool Hide = true;
    private string? MessageLabel;
    
    private async Task Create()
    {
        HideMessage();

        if (!IsAgeValid()) {
            ErrorMessage("Not valid age");
            return;
        }
        
        if (!IsPasswordValid())
        {
            ErrorMessage("Passwords do not match!");
            return;
        }
        
        try
        {
            await UserService.CreateUser(Name, Username, Password, Email, ParseAge());
            SuccessMessage("Successfully created user");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            ErrorMessage("Something went wrong creating a user");
        }
    }

    private void ErrorMessage(string message) {
        MessageColor = "red";
        Hide = false;
        MessageLabel = message;
    }

    private void SuccessMessage(string message) {
        MessageColor = "green";
        Hide = false;
        MessageLabel = message;
    }

    private void HideMessage() {
        Hide = true;
    }
    
    private bool IsPasswordValid()
    {
        return Password == Password2;
    }

    private int ParseAge() {
        int age = Int16.Parse(Age);
        return age;
    }

    private bool IsAgeValid() {
        try {
            int age = Int16.Parse(Age);
            if (age < 13 || age > 130) return false;
            return true;
        } catch (Exception e) {
            Console.WriteLine(e);
            return false;
        }
    }
    
}